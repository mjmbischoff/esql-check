name: Publish Docker images and release artifacts

on:
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_NAME: mjmbischoff/esql-check
  ES_RELEASE_TAG: v${{ github.event.release.tag_name }}

jobs:
  build-and-publish:
    name: Build Docker Images & Release Artifacts (${{ matrix.lang }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lang: [java, python, go]

    permissions:
      packages: write
      contents: write
      attestations: write
      id-token: write

    steps:
      - name: Check out repo
        uses: actions/checkout@v5

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set image tags
        id: tags
        run: |
          TAGS="${{ env.IMAGE_NAME }}:${{ matrix.lang }}-${{ github.event.release.tag_name }}"
          if [ "${{ matrix.lang }}" = "java" ]; then
            TAGS="$TAGS,${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }},${{ env.IMAGE_NAME }}:latest"
          fi
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.lang }}
          file: ./${{ matrix.lang }}/Dockerfile
          push: true
          build-args: |
            GIT_REF=${{ env.ES_RELEASE_TAG }}
          tags: ${{ steps.tags.outputs.tags }}

      - name: Prepare artifacts directory
        run: mkdir -p dist

      - name: Extract primary tag
        id: primary_tag
        run: |
          echo "tag=$(echo '${{ steps.tags.outputs.tags }}' | cut -d',' -f1)" >> $GITHUB_OUTPUT
      

      - name: Extract artifacts
        run: |
          if [ "${{ matrix.lang }}" = "java" ]; then
            # Export only the java executable and generated parser
            docker buildx build \
              --build-arg GIT_REF=${{ env.ES_RELEASE_TAG }} \
              --target builder \
              --output type=local,dest=./build/java,include=workspace/esql-check,include=workspace/dev/bischoff/michael/elastic/esql/validator \
              ./java

            mkdir -p dist
            cp ./build/java/workspace/esql-check ./dist/esql-check-java
            cp -r ./build/java/workspace/dev/bischoff/michael/elastic/esql/validator ./dist/java-grammar
            cd dist && zip -r parser-java.zip java-grammar && cd ..

          elif [ "${{ matrix.lang }}" = "python" ]; then
            # Python only needs the generated grammar
            docker buildx build \
              --build-arg GIT_REF=${{ env.ES_RELEASE_TAG }} \
              --target builder \
              --output type=local,dest=./build/python,include=workspace/python-generated-grammar \
              ./python

            mkdir -p dist
            cp -r ./build/python/workspace/python-generated-grammar ./dist/python-grammar
            cd dist && zip -r parser-python.zip python-grammar && cd ..

          elif [ "${{ matrix.lang }}" = "go" ]; then
            # Export only the Go executable and generated parser
            docker buildx build \
              --build-arg GIT_REF=${{ env.ES_RELEASE_TAG }} \
              --target builder \
              --output type=local,dest=./build/go,include=workspace/esql-check,include=workspace/app/parsing \
              ./go

            mkdir -p dist
            cp ./build/go/workspace/esql-check ./dist/esql-check-go
            cp -r ./build/go/workspace/app/parsing ./dist/go-grammar
            cd dist && zip -r parser-go.zip go-grammar && cd ..  
  
      - name: Upload artifacts to GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*

        
        
