FROM eclipse-temurin:24-alpine AS builder

WORKDIR /workspace

# Install dependencies
RUN apk add --no-cache git wget bash python3 py3-pip

# Download ANTLR
ENV ANTLR_VERSION=4.13.1
ENV ANTLR_JAR=antlr-${ANTLR_VERSION}-complete.jar
RUN wget https://www.antlr.org/download/${ANTLR_JAR} -O /usr/local/lib/${ANTLR_JAR} && \
    ln -s /usr/local/lib/${ANTLR_JAR} /usr/local/lib/antlr.jar

# Sparse checkout of Elasticsearch ANTLR grammar only
ARG GIT_REF=main
RUN git init esql && \
    cd esql && \
    git remote add origin https://github.com/elastic/elasticsearch.git && \
    git config core.sparseCheckout true && \
    echo "x-pack/plugin/esql/src/main/antlr/*" >> .git/info/sparse-checkout && \
    git fetch --depth 1 origin ${GIT_REF} && \
    git checkout FETCH_HEAD

# Prepare lexer and parser staging directories
RUN mkdir -p /workspace/python-generated-grammar /workspace/lexer-g4-files /workspace/parser-g4-files && \
    cp /workspace/esql/x-pack/plugin/esql/src/main/antlr/EsqlBaseLexer.g4 /workspace/lexer-g4-files/ && \
    cp /workspace/esql/x-pack/plugin/esql/src/main/antlr/lexer/*.g4 /workspace/lexer-g4-files/ && \
    cp /workspace/esql/x-pack/plugin/esql/src/main/antlr/EsqlBaseParser.g4 /workspace/parser-g4-files/ && \
    cp /workspace/esql/x-pack/plugin/esql/src/main/antlr/parser/*.g4 /workspace/parser-g4-files/

# Preprocess lexer and parser grammars:
#  - transform @header from /* */ to Python-style comments
#  - strip semantic predicates and superClass (java-only)
RUN python3 - <<'EOF'
import pathlib, re

G4_DIRS = ["/workspace/lexer-g4-files", "/workspace/parser-g4-files"]

header_re = re.compile(r'@header\s*\{(.*?)\}', re.DOTALL)
predicate_re = re.compile(r'\{this\.[^}]+\}\?')
superclass_re = re.compile(r'superClass\s*=\s*[^;]+;')

def convert_header(match: re.Match) -> str:
    content = match.group(1)
    lines = content.splitlines()
    out_lines = []
    for line in lines:
        # remove block comment markers
        line = line.strip()
        if line.startswith("/*"):
            line = line[2:]
        if line.endswith("*/"):
            line = line[:-2]
        if line.startswith("*"):
            line = line[1:]
        out_lines.append("# " + line.strip() if line.strip() else "#")
    return "@header {\n" + "\n".join(out_lines) + "\n}"

for g4_dir in G4_DIRS:
    g4_path = pathlib.Path(g4_dir)
    for f in g4_path.glob("*.g4"):
        txt = f.read_text()
        # Replace @header with Python-style comment version
        txt = header_re.sub(convert_header, txt)
        # Remove Java-only stuff
        txt = predicate_re.sub('', txt)
        txt = superclass_re.sub('', txt)
        f.write_text(txt)
EOF

# Generate Python sources with ANTLR
RUN cd /workspace/lexer-g4-files && \
    java -Xmx500M -cp /usr/local/lib/antlr.jar \
         org.antlr.v4.Tool -Dlanguage=Python3 \
         -o /workspace/python-generated-grammar \
         -lib . EsqlBaseLexer.g4
RUN cd /workspace/parser-g4-files && \
    java -Xmx500M -cp /usr/local/lib/antlr.jar \
         org.antlr.v4.Tool -Dlanguage=Python3 \
         -o /workspace/python-generated-grammar \
         -lib . EsqlBaseParser.g4

# Prepare clean export directory for pip packaging
RUN mkdir -p /workspace/bundle/esql_parser && \
    cp /workspace/python-generated-grammar/*.py /workspace/bundle/esql_parser

COPY bundle/LICENSE /workspace/bundle/ 
COPY bundle/NOTICE.txt /workspace/bundle/ 
COPY bundle/pyproject.toml /workspace/bundle/
COPY bundle/README.md /workspace/bundle/

# Update version in pyproject.toml
RUN if echo "${GIT_REF}" | grep -Eq '^[0-9]+(\.[0-9]+)*$'; then \
      VERSION="${GIT_REF}"; \
    else \
      VERSION="0.0.0.dev+${GIT_REF}"; \
    fi && \
    sed -i "s/^version = .*/version = \"${VERSION}\"/" /workspace/bundle/pyproject.toml

# Build PyPI artifacts (sdist + wheel) in isolated venv
RUN python3 -m venv /venv && \
    /venv/bin/pip install --no-cache-dir build && \
    cd /workspace/bundle && \
    /venv/bin/python -m build --sdist --wheel --outdir /export

#========================
# Export artifacts stage
FROM eclipse-temurin:24-alpine AS export
WORKDIR /export
COPY --from=builder /export/esql_parser-*.tar.gz .
COPY --from=builder /export/esql_parser-*-py3-none-any.whl .

#========================
# Final image
FROM python:3.11-alpine AS final
WORKDIR /app
COPY --from=builder /workspace/python-generated-grammar ./grammar
COPY esql-check.py .
RUN pip install --no-cache-dir antlr4-python3-runtime==4.13.1
ENTRYPOINT ["python3", "esql-check.py"]